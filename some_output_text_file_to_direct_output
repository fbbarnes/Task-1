test_vector 
 [[0.92284433 0.77360107 0.02352459]]
Probabilities 
 [[8.51641653e-01 5.98458616e-01 5.53406337e-04]]
Normalise 
 [[0.76620781 0.64229596 0.01953171]]
Normalised probabilites 
 [[5.87074412e-01 4.12544101e-01 3.81487564e-04]]
Sum 
 1.0
Wrote profile results to example.py.lprof
Timer unit: 1e-06 s

Total time: 1.9e-05 s
File: example.py
Function: Probabilities at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def Probabilities(vector):
     6                                           
     7         3         12.0      4.0     63.2      vector_conj = np.conjugate(vector)
     8         3          4.0      1.3     21.1      vector_sq = vector * vector_conj
     9                                           
    10         3          3.0      1.0     15.8      return vector_sq

Total time: 3.7e-05 s
File: example.py
Function: Normalise at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                           @profile
    14                                           def Normalise(vector):
    15                                               
    16         1         31.0     31.0     83.8      vector_sq_sum = np.sum(Probabilities(vector))
    17         1          6.0      6.0     16.2      vector_normalised = vector/(np.sqrt(vector_sq_sum))
    18                                           
    19         1          0.0      0.0      0.0      return vector_normalised

