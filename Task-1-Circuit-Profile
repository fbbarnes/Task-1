Loop  0
Distance:  1.7225319565351478
Loop  1
Distance:  1.4320603340032607
Loop  2
Distance:  1.334683023634231
Distances:  [1.72253196 1.43206033 1.33468302]
Final parameters:  [[[6.15880808 4.47051035 1.86592434 3.36899549]
  [3.71721921 5.0085364  2.80437233 3.44252825]]]
Target:  [-0.08943973+0.09373496j -0.10622526-0.28966156j  0.1351193 +0.17229655j
 -0.23300386+0.09040334j -0.06012397-0.09017049j  0.25413058-0.05332804j
  0.05020386-0.18062508j -0.30541855+0.15795523j  0.20475105+0.25427863j
 -0.23037405-0.09353935j  0.19532853+0.02215773j  0.20773888-0.30675097j
  0.13175143+0.03672734j  0.19452967-0.01337025j  0.25796775+0.08328224j
  0.17115155-0.2031489j ]
Target normalised  [-0.08943973+0.09373496j -0.10622526-0.28966156j  0.1351193 +0.17229655j
 -0.23300386+0.09040334j -0.06012397-0.09017049j  0.25413058-0.05332804j
  0.05020386-0.18062508j -0.30541855+0.15795523j  0.20475105+0.25427863j
 -0.23037405-0.09353935j  0.19532853+0.02215773j  0.20773888-0.30675097j
  0.13175143+0.03672734j  0.19452967-0.01337025j  0.25796775+0.08328224j
  0.17115155-0.2031489j ]
Solution:  [-0.04157828+0.j         -0.00140937+0.00217182j -0.05077186-0.01549151j
  0.00253019-0.00212692j -0.01856062-0.0529377j   0.00339431+0.00082491j
  0.00294077+0.07155845j  0.00383749+0.00227199j -0.107925  +0.34773944j
 -0.01450564-0.01742462j  0.26135186-0.38441838j -0.01122087-0.02668208j
  0.49092169-0.01782078j  0.01570978-0.02624705j  0.60611153+0.16114961j
 -0.02896275+0.0261974j ]
solution normalised  [-0.04157828+0.j         -0.00140937+0.00217182j -0.05077186-0.01549151j
  0.00253019-0.00212692j -0.01856062-0.0529377j   0.00339431+0.00082491j
  0.00294077+0.07155845j  0.00383749+0.00227199j -0.107925  +0.34773944j
 -0.01450564-0.01742462j  0.26135186-0.38441838j -0.01122087-0.02668208j
  0.49092169-0.01782078j  0.01570978-0.02624705j  0.60611153+0.16114961j
 -0.02896275+0.0261974j ]
Wrote profile results to Task-1-Circuit.py.lprof
Timer unit: 1e-06 s

Total time: 0.000222 s
File: Task-1-Circuit.py
Function: Probabilities at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                           @profile
    48                                           def Probabilities(vector):
    49                                           
    50        38        131.0      3.4     59.0      vector_conj = np.conjugate(vector)
    51        38         77.0      2.0     34.7      vector_sq = vector * vector_conj
    52                                           
    53        38         14.0      0.4      6.3      return vector_sq

Total time: 0.000142 s
File: Task-1-Circuit.py
Function: Normalise at line 55

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    55                                           @profile
    56                                           def Normalise(vector):
    57                                               
    58         3        111.0     37.0     78.2      vector_sq_sum = np.sum(Probabilities(vector))
    59         3         28.0      9.3     19.7      vector_normalised = vector/(np.sqrt(vector_sq_sum))
    60                                           
    61         3          3.0      1.0      2.1      return vector_normalised

Total time: 0.024154 s
File: Task-1-Circuit.py
Function: EvenBlock at line 63

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    63                                           @profile
    64                                           def EvenBlock(theta,circ):
    65                                           
    66        36       1875.0     52.1      7.8      circ.rz(theta[0], 0)
    67        36       1644.0     45.7      6.8      circ.rz(theta[1], 1)
    68        36       1598.0     44.4      6.6      circ.rz(theta[2], 2)
    69        36       1593.0     44.2      6.6      circ.rz(theta[3], 3)
    70        36       2915.0     81.0     12.1      circ.cz(0, 1)
    71        36       2481.0     68.9     10.3      circ.cz(0, 2)
    72        36       2393.0     66.5      9.9      circ.cz(0, 3)
    73        36       2362.0     65.6      9.8      circ.cz(1, 2)
    74        36       2389.0     66.4      9.9      circ.cz(1, 3)
    75        36       2419.0     67.2     10.0      circ.cz(2, 3)
    76        36       2467.0     68.5     10.2      circ.barrier()
    77                                           
    78        36         18.0      0.5      0.1      return circ

Total time: 0.010903 s
File: Task-1-Circuit.py
Function: OddBlock at line 80

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    80                                           @profile
    81                                           def OddBlock(theta,circ):
    82                                           
    83        36       2977.0     82.7     27.3      circ.rx(theta[0], 0)
    84        36       1890.0     52.5     17.3      circ.rx(theta[1], 1)
    85        36       1732.0     48.1     15.9      circ.rx(theta[2], 2)
    86        36       1692.0     47.0     15.5      circ.rx(theta[3], 3)
    87        36       2592.0     72.0     23.8      circ.barrier()
    88                                           
    89        36         20.0      0.6      0.2      return circ

Total time: 0.035831 s
File: Task-1-Circuit.py
Function: Layer at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                           @profile
    92                                           def Layer(Layer_params,circ):
    93        36         60.0      1.7      0.2      Odd_params = Layer_params[0]
    94        36         22.0      0.6      0.1      Even_params = Layer_params[1]
    95                                               
    96        36      11196.0    311.0     31.2      OddBlock(Odd_params,circ)
    97        36      24542.0    681.7     68.5      EvenBlock(Even_params,circ)
    98                                           
    99        36         11.0      0.3      0.0      return circ

Total time: 0.040573 s
File: Task-1-Circuit.py
Function: Circuit at line 101

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   101                                           @profile
   102                                           def Circuit(Circuit_params):
   103        36       4290.0    119.2     10.6      circ = QuantumCircuit(4,4)
   104        72        174.0      2.4      0.4      for layer_params in Circuit_params:
   105        36      36090.0   1002.5     89.0          Layer(layer_params,circ)
   106                                           
   107        36         19.0      0.5      0.0      return circ

Total time: 1.0845 s
File: Task-1-Circuit.py
Function: Loop at line 115

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   115                                           @profile
   116                                           def Loop(params):
   117                                               #randomise circuit parameters
   118                                               #print(np.shape(params))
   119        35        411.0     11.7      0.0      params = np.reshape(params, (no_layers,2,4))
   120                                               #print(np.shape(params))
   121                                               
   122                                               #print("New circuit being constructed...")
   123                                           
   124                                               #circuit =QuantumCircuit(qreg_q,creg_c)
   125                                           
   126                                           
   127                                               ''' 
   128                                               #example parameters
   129                                               theta = np.array([pi/4,0,pi,0.6])
   130                                               Layer_params = np.stack((theta,theta*2), axis = 0)
   131                                               Circuit_params = np.stack((Layer_params, Layer_params*2), axis =0)
   132                                               print(Circuit_params)
   133                                               print(np.shape(Circuit_params))
   134                                           
   135                                               '''
   136                                           
   137                                               #make circuit
   138                                           
   139        35      39700.0   1134.3      3.7      circuit = Circuit(params)
   140                                           
   141                                           
   142                                               #results
   143        35    1036250.0  29607.1     95.6      result = execute(circuit, backend = simulator).result()
   144                                           
   145                                               #reinitialise circuit
   146                                           
   147                                               
   148                                           
   149        35       1020.0     29.1      0.1      statevector = result.get_statevector()
   150                                           
   151                                               #print("Target: ",phi)
   152                                           
   153        35        246.0      7.0      0.0      difference = statevector - phi
   154        35       1590.0     45.4      0.1      distance = np.sum(Probabilities(difference))
   155                                               #print("Distance:", distance)
   156                                           
   157                                           
   158                                           
   159                                               # Outputs
   160                                               #print('result ', statevector)
   161                                               #print(np.sum(Probabilities(statevector)))
   162                                               #print('target ', phi)
   163                                               #print(np.sum(Probabilities(phi)))
   164                                               #print('difference', difference)
   165                                               #print(np.sum(Probabilities(difference)))
   166                                               #print('distance', distance)
   167                                               #print(circuit)
   168                                               #circuit.draw(output='mpl')
   169                                               #plt.show()
   170        35       5251.0    150.0      0.5      circuit =QuantumCircuit(4,4)
   171                                           
   172        35         32.0      0.9      0.0      return distance

Total time: 0.740159 s
File: Task-1-Circuit.py
Function: UpdateParameters at line 174

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   174                                           @profile
   175                                           def UpdateParameters(params, gamma):
   176                                           
   177         2         57.0     28.5      0.0      grad_Loop = np.zeros(np.size(params))
   178         2         17.0      8.5      0.0      new_params = np.zeros(np.shape(params))
   179                                           
   180                                           
   181        18         20.0      1.1      0.0      for j in range(0, np.size(grad_Loop)):
   182        16     740014.0  46250.9    100.0          grad_Loop[j] = AQGD().deriv(j, params.flatten(), Loop)
   183                                           
   184         2         35.0     17.5      0.0      grad_Loop = np.reshape(grad_Loop, np.shape(new_params))
   185                                           
   186         2         14.0      7.0      0.0      new_params = params - gamma * grad_Loop
   187                                           
   188         2          2.0      1.0      0.0      return new_params

Total time: 1.08699 s
File: Task-1-Circuit.py
Function: OptimiseParameters at line 190

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   190                                           @profile
   191                                           def OptimiseParameters(no_loops,no_layers, params_init, gamma):
   192                                           
   193         1          3.0      3.0      0.0      distances = np.zeros(no_loops)
   194                                           
   195         1          2.0      2.0      0.0      parameters = np.zeros((no_loops,no_layers,2,4))
   196                                           
   197         1          0.0      0.0      0.0      loops_done =0
   198                                               
   199                                           
   200         4          3.0      0.8      0.0      for i in range(0,no_loops):
   201         3         10.0      3.3      0.0          print("Loop ", i)
   202                                                   
   203         3          2.0      0.7      0.0          if i == 0:
   204         1          4.0      4.0      0.0              parameters[i] = params_init
   205         1     301571.0 301571.0     27.7              distances[i] = Loop(parameters[i])
   206         1         12.0     12.0      0.0              print("Distance: ", distances[i])
   207         1          1.0      1.0      0.0              loops_done += 1
   208                                                   else:
   209         2     740211.0 370105.5     68.1              parameters[i] = UpdateParameters(parameters[i-1], gamma)
   210         2      45145.0  22572.5      4.2              distances[i] = Loop(parameters[i])
   211         2         16.0      8.0      0.0              print("Distance: ", distances[i])
   212                                                       
   213                                           
   214         2          4.0      2.0      0.0              if distances[i] > distances[i-1]:
   215                                                           print("Converged after loop ", i)
   216                                                           print("loops done ", loops_done)
   217                                                           break
   218                                                       else:
   219         2          2.0      1.0      0.0                  loops_done += 1
   220                                           
   221                                           
   222         1          2.0      2.0      0.0      return parameters[0:loops_done], distances[0:loops_done]

